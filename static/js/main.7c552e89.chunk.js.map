{"version":3,"sources":["api/unsplash.js","Components/SearchBar.js","Components/ImageCard.js","Components/ImageList.js","Components/App.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","onFormSubmit","event","preventDefault","props","images","onEnter","console","log","className","onSubmit","this","type","onChange","setState","target","value","onClick","onInputClick","placeholder","buttonClick","React","Component","ImageCard","spans","imageRef","createRef","image","description","urls","alt_description","user","Card","Image","src","thumb","Content","Header","Meta","name","Description","ImageList","map","key","id","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","style","marginTop","color","count","searchResultsCount","ReactDOM","render","document","querySelector"],"mappings":"+OAGeA,E,OAAAA,EAAMC,OAAO,CAC3BC,QAAS,2BACTC,QAAS,CACRC,cAAe,gFCiEFC,E,4MAlDdC,MAAQ,CAAEC,KAAM,I,EAmBhBC,aAAe,SAAAC,GACdA,EAAMC,eAAe,EAAKC,MAAMC,QAChC,EAAKD,MAAME,QAAQ,EAAKP,MAAMC,O,4DAhBjBE,GACbK,QAAQC,IAAI,mB,qCAIZD,QAAQC,IAAI,mB,oCAIZD,QAAQC,IAAI,oB,+BAeH,IAAD,OACR,OACC,yBAAKC,UAAU,cACd,0BAAMC,SAAUC,KAAKV,aAAcQ,UAAU,WAC5C,yBAAKA,UAAU,SACd,sDACA,2BACCG,KAAK,OACLC,SAAW,SAAAX,GAAK,OAAI,EAAKY,SAAS,CAAEd,KAAME,EAAMa,OAAOC,SACvDA,MAAOL,KAAKZ,MAAMC,KAClBiB,QAASN,KAAKO,aACdC,YAAY,sBAEd,4BAAQF,QAASN,KAAKS,aAAtB,iB,GA7DmBC,IAAMC,W,kBCyDfC,E,kDA3Cd,WAAYnB,GAAQ,IAAD,8BAClB,cAAMA,IAEDL,MAAQ,CAAEyB,MAAO,GAEtB,EAAKC,SAAWJ,IAAMK,YALJ,E,qDAmBV,MAE6Cf,KAAKP,MAAMuB,MAAxDC,EAFA,EAEAA,YAAaC,EAFb,EAEaA,KAAMC,EAFnB,EAEmBA,gBAAiBC,EAFpC,EAEoCA,KAE5C,OACC,6BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAKL,EAAKM,QACjB,kBAACH,EAAA,EAAKI,QAAN,KACE,kBAACJ,EAAA,EAAKK,OAAN,KAAcP,GACd,kBAACE,EAAA,EAAKM,KAAN,KACE,0BAAM7B,UAAU,YAAYsB,EAAKQ,OAEnC,kBAACP,EAAA,EAAKQ,YAAN,KACGZ,KAIR,kC,GAtCoBP,IAAMC,WCDfmB,G,OAVG,SAACrC,GAElB,IAAMC,EAASD,EAAMC,OAAOqC,KAAI,SAACf,GAEhC,OADApB,QAAQC,IAAImB,GACL,kBAAC,EAAD,CAAWA,MAAOA,EAAOgB,IAAKhB,EAAMiB,QAG5C,OAAQ,yBAAKnC,UAAU,oBAAoBmC,GAAG,gBAAgBvC,KC2ChDwC,E,4MA7Cd9C,MAAQ,CACPM,OAAQ,I,EAkBTyC,e,uCAAiB,WAAM9C,GAAN,eAAA+C,EAAA,sEACOC,EAASC,IAAI,iBAAkB,CACrDC,OAAQ,CAAEC,MAAOnD,KAFF,OACVoD,EADU,OAIhB,EAAKtC,SAAS,CAAET,OAAQ+C,EAASC,KAAKC,UAJtB,2C,6GAUhB,OACA,yBAAK7C,UAAU,eAAe8C,MAAO,CAAEC,UAAW,OAAQC,MAAO,qBAChE,8CAEA,kBAAC,EAAD,CACCnD,QAASK,KAAKmC,eACdY,MAAO/C,KAAKgD,mBACZtD,OAAQM,KAAKZ,MAAMM,SAErB,6BACC,kBAAC,EAAD,CAAWA,OAAQM,KAAKZ,MAAMM,c,GAzCfgB,IAAMC,WCHxBsC,IAASC,OACR,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.7c552e89.chunk.js","sourcesContent":["// `axios` is a promise-based http client for browsers and node.js. It will allow the app to make a request to `api.unsplash.com` and recieve a response.\nimport axios from \"axios\";\n\nexport default axios.create({\n\tbaseURL: 'https://api.unsplash.com',\n\theaders: {\n\t\tAuthorization: 'Client-ID 07d23dfa46097bb0f07d11e62d016f2661e7a4b7de42e1f6ba77c0b67f988c42'\n\t}\n});\n","import React from \"react\";\n\nclass SearchBar extends React.Component {\n\t/* Controlled Vs UnControlled Elements:\n\t\tControlled Components make it so that any saved or processed data is controlled by `state` or run through react as the source of truth. One of the advantages to this is that manipulating items in `state` becomes easier, i.e. text `toUpperCase`\n\t\tUnControlled Components save the info in the `DOM` as opposed to in react in the `state` object.\n\t*/\n\n\t/* *** `SearchBar` Component Flow ***\n\t\t* User Types in Input\n\t\t\t-`value` from text passed to `onChange` in `input`\n\t\t* Callback (`onChange`) Gets Invoked\n\t\t\t- `onChange` begins running when `input` is changed\n\t\t* Calls `setState` with the new `value`\n\t\t\t-  `state` is updated via `term: event.targed.value`\n\t\t* Component Re-Renders\n\t\t\t- `state.term` gets overwritten as more text is typed\n\t\t* `input` is told what the value is (coming from `state`)\n\t\t\t-\n\t*/\n\n\tstate = { term: \"\" };\n\n\t// called any time something is typed into the `SearchBar` input box\n\t// Community Convention for event handlers is to name them after `what and when` the handler is looking for, so that it is easier to identify what the handler function is supposed to do. In this case, `what` is the `input` box and `when` is `onChange` (there are others like in JS, `onClick`, `onSubmit`, etc.)\n\t// `console.log` to see keydown events; this method is not used.\n\tonInputChange(event) {\n\t\tconsole.log(\"Input Changed\");\n\t}\n\t// `console.log` to see keydown events; this method is not used.\n\tonInputClick() {\n\t\tconsole.log(\"Input Clicked\");\n\t}\n\t// `console.log` to see keydown events; this method is not used.\n\tbuttonClick() {\n\t\tconsole.log(\"Button Clicked\");\n\t}\n\n\t// arrow functions `() => {}` will automatically bind methods\n\t// `event.preventDefault()` prevents the default event from happening. in this case, when a user presses `Enter` after typing in a search term, it prevents the page from re-rendering.\n\tonFormSubmit = event => {\n\t\tevent.preventDefault(this.props.images);\n\t\tthis.props.onEnter(this.state.term);\n\t};\n\n\t/*methods passed to event handlers do not need the `()` added to call them, else it will call the function on component render instead of when an event happens */\n\t/* Whatever is typed in `value` is what will show in `input` box, so `this.state.term` renders what the user is typing from the `state` object as opposed to the `DOM` */\n\t/* `onChange` is called any time something is typed into the `SearchBar` input box. It updates `state.term` from the current `value` */\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"ui segment\">\n\t\t\t\t<form onSubmit={this.onFormSubmit} className=\"ui form\">\n\t\t\t\t\t<div className=\"field\">\n\t\t\t\t\t\t<label>Enter Search Terms:</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={ event => this.setState({ term: event.target.value })}\n\t\t\t\t\t\t\tvalue={this.state.term}\n\t\t\t\t\t\t\tonClick={this.onInputClick}\n\t\t\t\t\t\t\tplaceholder=\"Enter Search Term\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={this.buttonClick}>Search</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport { Card, Image } from 'semantic-ui-react';\n\n/*\t*** ImageCard Flow:\n\tLet `ImageCard` render itself and it's image;\n\tReach into DOM and get `height` of `image`;\n\tSet `image.height` on `state` to get `ImageCard` to re-renders\n\t\tWhile re-rendering, assign 'grid-row-end' to make image take up appropriate space.\n*/\n\n/* *** React Refs:\n\tGives access to single DOM element;\n\tCreate `refs` in `constructor`, assign them to instance variables, then pass to JSX element as `props`.\n*/\n\nclass ImageCard extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { spans: 0}\n\n\t\tthis.imageRef = React.createRef();\n\t}\n/*\n\tcomponentDidMount() {\n\t\tconsole.log(this.imageRef);\n\t\tthis.imageRef.current.addEventListener('load', this.setSpan);\n\t}\n\n\tsetSpan = () => {\n\t\tconst height = this.imageRef.current.height;\n\t\tconst spans = Math.ceil(height / 10);\n\t\tthis.setState({ spans })\n\t}\n*/\n\trender() {\n\t\t// you can destructure property elements directly out of an object to make coding easier:\n\t\tconst { description, urls, alt_description, user } = this.props.image;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t  <Card>\n\t\t\t    <Image src={urls.thumb} />\n\t\t\t    <Card.Content>\n\t\t\t      <Card.Header>{alt_description}</Card.Header>\n\t\t\t      <Card.Meta>\n\t\t\t        <span className='userName'>{user.name}</span>\n\t\t\t      </Card.Meta>\n\t\t\t      <Card.Description>\n\t\t\t        {description}\n\t\t\t      </Card.Description>\n\t\t\t    </Card.Content>\n\t\t\t  </Card>\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport ImageCard from \"./ImageCard\";\nimport \"./ImageList.css\";\n\nconst ImageList = (props) => {\n\n\tconst images = props.images.map((image) => {\n\t\tconsole.log(image);\n\t\treturn <ImageCard image={image} key={image.id} />;\n\t});\n\n\treturn (<div className=\"ui grid container\" id=\"imgContainer\">{images}</div>);\n};\n\nexport default ImageList;\n","import React from 'react';\nimport unsplash from '../api/unsplash';\nimport SearchBar from './SearchBar';\nimport ImageList from './ImageList';\n\n\n// `App.js` created in new\t`Components` folder instead of `index.js`. When working with larger applications, it is a best practice to place all of the components into one folder.\nclass App extends React.Component {\n\n\tstate = {\n\t\timages: []\n\t};\n\n\t// *** API Requests!!! ***\n\t/* *** API Request Flow:\n\t\t`App` renders one time w/o list of images.\n\t\t`onSearchSubmit` method called.\n\t\tRequest made to `unsplash`/ `Axios`.\n\t\t\t\t...wait\n\t\tRequest Completed, data retreived.\n\t\tSet image data state of `App` component.\n\t\t`App` component re-renders and shows images.\n\t*/\n\t// use `axios` to send a `get` request to `unsplash`\n\t// pass `params` for your query to the api. `onSearchSubmit` is passed down as `onEnter` to `SearchBar`. When the `input` field is submitted, the `state.term` value from `SearchBar` is passed back up to `App` via the `onSearchSubmit` as the 'term' value;\n\t// the `headers` object contains the access key to make requests to the `unsplash` api via `unsplash.js`.\n\t// callback for `onSearchSubmit` is set as arrow function so it will bind to `onEnter`, allowing it to call the term set in `onEnter` back to the `onSearchSubmit` function as a variable.\n\n\tonSearchSubmit = async term => {\n\t\tconst response = await unsplash.get('/search/photos', {\n\t\t\tparams: { query: term },\n\t\t});\n\t\tthis.setState({ images: response.data.results });\n\t};\n\n\t\n\n\trender() {\n\t\treturn(\n\t\t<div className=\"ui container\" style={{ marginTop: \"10px\", color: \"rgb(29, 238, 18)\" }}>\n\t\t\t<h1>Image Tiles!!!</h1>\n\t\t\t{/* `props` passed down can have any name you choose */}\n\t\t\t<SearchBar\n\t\t\t\tonEnter={this.onSearchSubmit}\n\t\t\t\tcount={this.searchResultsCount}\n\t\t\t\timages={this.state.images}\n\t\t\t/>\n\t\t<br />\n\t\t\t<ImageList images={this.state.images} />\n\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n\t<App />, document.querySelector('#root')\n);\n"],"sourceRoot":""}